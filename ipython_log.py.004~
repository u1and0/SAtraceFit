# IPython log file

get_ipython().magic('load filler')


# %load filler
# from itertools import *
# from moreitertools import *
from datetime import datetime, timedelta
import time
import numpy as np


def fill(li,ins):
	'''
	引数:
		li:リスト
		ins:int
	戻り値：編集を加えた、引数と同じリスト
	'''
	for two in list(pairwise(li)):   #liの中身を2つずつにわける
		print(two)
		if two[-1]-two[0]>ins:   #抜き出したタプルの要素の差がins上であれば
			for i in range(two[0]+ins,two[-1],ins):
				li.insert(li.index(two[-1]),i)   #タプルの要素間の場所にinsずつ増やした値を入れる
				print('insert',i)
		else:print('OK!')
	return li



'''TEST
li=[[1,50],[0,8,10,16],[1,5,9,11,14,15]]
for x in li:
	print(fill(x,10))
	# print(bool(fill(x)==list(range(x[0],x[-1]+1))))
'''




def datetime_to_epoch(d):
	return int(time.mktime(d.timetuple()))

def epoch_to_datetime(epoch):
	return datetime(*time.localtime(epoch)[:6])

def datetimerange(start_time,end_time,step_time=timedelta(seconds=1)):
	'''
	start_timeからend_timeまでの日時をイテレートするジェネレータ
	* 引数は最低ふたつ
		* start_time:rangeで生成する最初の日時(datetime型)
		* end_time:rangeで生成する最後の日時(datetime型)
		* [オプション]step_time:rangeで生成する日時の間隔(timedelta型)
			* デフォルト値は1秒間隔
	* 戻り値はイテレータ(datetime型)
	'''
	for i in np.arange(datetime_to_epoch(start_time),datetime_to_epoch(end_time),step_time.total_seconds()):
		yield epoch_to_datetime(i)





'''
datetimerange() TEST
'''
start=datetime(2016,2,4,14,38,16)
end=datetime(2016,5,4,14,38,17)
step=timedelta(days=1)

# seclist=[x for x in datetimerange(start,end,step)]
# print(seclist)

for i in datetimerange(start,end,step):
	print(i)
s=datetime(2016,2,23,6,8,7959)
s=datetime(2016,2,23,6,8,59)
s=datetime(2016,3,23,6,8,59)
e=datetime(2016,3,23,6,8,59)
s=datetime(2016,2,23,6,8,59)
d=timedelta(days=1)
t=datetimerange(s,e,d)
t
#[Out]# <generator object datetimerange at 0x000001A83B481990>
next(t)
#[Out]# datetime.datetime(2016, 2, 23, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 24, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 25, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 26, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 27, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 28, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 2, 29, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 1, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 2, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 3, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 4, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 5, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 6, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 7, 6, 8, 59)
next(t)
#[Out]# datetime.datetime(2016, 3, 8, 6, 8, 59)
d=timedelta(hours=1)
for i in d:
    print(i)
for i in t:
    print(i)
d
#[Out]# datetime.timedelta(0, 3600)
for i in t:
   print(i)
    
t
#[Out]# <generator object datetimerange at 0x000001A83B481990>
for i in t:
   print(i)
    
d
#[Out]# datetime.timedelta(0, 3600)
t
#[Out]# <generator object datetimerange at 0x000001A83B481990>
for i in drange(s,e):
    print(i)
    
for i in drange(s,e):
    print(i)
    get_ipython().magic('reset')
    
_%reset
get_ipython().magic('reset')
get_ipython().magic('logstate')
s=datetime(2016,2,23,6,8,59)
get_ipython().magic('load filler')


# %load filler
# from itertools import *
# from moreitertools import *
from datetime import datetime, timedelta
import time
import numpy as np


def fill(li,ins):
	'''
	引数:
		li:リスト
		ins:int
	戻り値：編集を加えた、引数と同じリスト
	'''
	for two in list(pairwise(li)):   #liの中身を2つずつにわける
		print(two)
		if two[-1]-two[0]>ins:   #抜き出したタプルの要素の差がins上であれば
			for i in range(two[0]+ins,two[-1],ins):
				li.insert(li.index(two[-1]),i)   #タプルの要素間の場所にinsずつ増やした値を入れる
				print('insert',i)
		else:print('OK!')
	return li



'''TEST
li=[[1,50],[0,8,10,16],[1,5,9,11,14,15]]
for x in li:
	print(fill(x,10))
	# print(bool(fill(x)==list(range(x[0],x[-1]+1))))
'''




def datetime_to_epoch(d):
	return int(time.mktime(d.timetuple()))

def epoch_to_datetime(epoch):
	return datetime(*time.localtime(epoch)[:6])

def drange(start_time,end_time,step_time=timedelta(seconds=1)):
	'''
	__INTRODUCTION__
	**start_timeからend_timeまでの日時をイテレートするジェネレータ**


	__USAGE__

	```python:example
	start=datetime(2016,2,24,14,38,16)
	end=datetime(2016,3,4,14,38,17)
	step=timedelta(days=1)

	for i in drange(start,end,step):
		print(i)

	# --result--
	# 2016-02-24 14:38:16
	# 2016-02-25 14:38:16
	# 2016-02-26 14:38:16
	# 2016-02-27 14:38:16
	# 2016-02-28 14:38:16
	# 2016-02-29 14:38:16
	# 2016-03-01 14:38:16
	# 2016-03-02 14:38:16
	# 2016-03-03 14:38:16
	# 2016-03-04 14:38:16
	```

	* python バージョン2.7移行に対応
	* 引数は最低2つ、オプション1つ
		* start_time:rangeで生成する最初の日時(datetime型)
		* end_time:rangeで生成する最後の日時(datetime型)
		* [オプション]step_time:rangeで生成する日時の間隔(timedelta型)
			* デフォルト値は1秒間隔
			* 小数対応(hours=10.5←10時間30分ずつ増加)
	* 戻り値はイテレータ(datetime型)


	__ACTION__
	1. start_time, end_timeをエポック時間に直す
	2. step_timeをtotal_seconds()で秒に直す
	3. np.arange()関数でエポック秒のイテレータを返し、datetime型に直してイールドする
	'''
	for i in np.arange(datetime_to_epoch(start_time),datetime_to_epoch(end_time),step_time.total_seconds()):
		yield epoch_to_datetime(i)





'''
drange() TEST
'''
start=datetime(2016,2,24,14,38,16)
end=datetime(2016,3,4,14,38,17)
step=timedelta(days=1)

# seclist=[x for x in drange(start,end,step)]
# print(seclist)

for i in drange(start,end,step):
	print(i)
s=datetime(2016,2,23,6,8,59)
e=datetime(2016,3,23,6,8,59)
t=timedelata(days=1)
t=timedelta(days=1)
for i in drange(s,e,t):
    print(i)
    
t=timedelta(hours=12)
for i in drange(s,e,t):
    print(i)
    
t=timedelta(days=0.5)
for i in drange(s,e,t):
    print(i)
    
t=timedelta(days=2,seconds=1)
for i in drange(s,e,t):
    print(i)
    
t=timedelta(hours=12,minutes=15,seconds=10)
for i in drange(s,e,t):
    print(i)
    
t=timedelta(monthes=0.1,days=1,hours=12,minutes=15,seconds=10)
t=timedelta(months=0.1,days=1,hours=12,minutes=15,seconds=10)
t=timedelta(month=0.1,days=1,hours=12,minutes=15,seconds=10)
get_ipython().magic('pinfo timedelta')
t=timedelta(days=1,hours=1,minutes=15,seconds=10)
for i in drange(s,e,t):
    print(i)
    
get_ipython().magic('logstop')
